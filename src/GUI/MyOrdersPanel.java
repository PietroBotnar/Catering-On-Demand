/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import COD_main.Customer;
import COD_main.Item;
import COD_main.Order;
import database_conn.DbConnect;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DecimalFormat;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.border.Border;
import javax.swing.tree.DefaultMutableTreeNode;

/**
 *
 * @author Petru Botnar;
 */
//my orders panel class
//this class is used to display the orders made by the customer
public class MyOrdersPanel extends javax.swing.JPanel {

    /**
     * Creates new form MyOrdersPanel
     */
    JPanel orders = new JPanel();
    JScrollPane scrollOrders;
    DbConnect db = new DbConnect();
    Customer customer;
    Border paddingBorder;
    DecimalFormat df = new DecimalFormat("#.00");

    //constructor
    public MyOrdersPanel(Customer c) {
        this.customer = c;
    }
    //update method to populate the panel with the orders
    public void updateOrders() {
        //clearing the panel
        removeAll();
        //initialising the panel as new and setting a grib bag layout
        orders = new JPanel();
        orders.setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridwidth = GridBagConstraints.REMAINDER;
        gbc.anchor = GridBagConstraints.FIRST_LINE_START;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.weightx = 1;
        GridBagConstraints gbc2 = new GridBagConstraints();
        gbc2.gridwidth = GridBagConstraints.REMAINDER;
        gbc2.anchor = GridBagConstraints.FIRST_LINE_START;
        gbc2.weightx = 1;
        
        //the orders are displayed using trees
        //for each order made by a customer
        //a root node is created, and for each item in the order a child node is created and added to the root
        for (final Order o : db.getOrders(customer)) {
            DefaultMutableTreeNode root = new DefaultMutableTreeNode("Order date: " + o.getTime() +" "+o.getType()+" " +" Status: " + o.getStatus() + " Total: Â£ " + (df.format(o.getTotal_price())));
            for (Item i : db.getOrderItems(customer, o)) {
                DefaultMutableTreeNode node = new DefaultMutableTreeNode("x"+i.getOrdered_quantity()+" "+i.getTitle());
                root.add(node);
            }
            JTree tree = new JTree(root);
            //creating a button for the return
            final JButton ret = new JButton("Return");
            if (!o.isReturned()) {
                //return button action listener implementation
                ret.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent ae) {
                        //when button pressed, a confirmation message is prompt
                        //and the orders is set to returned into the database
                        int response;
                        response = JOptionPane.showConfirmDialog(null, "Are you sure you want to return this order?", "Order Return", JOptionPane.YES_NO_OPTION);
                        if (response == 0) {
                            db.InsertReturn(o);
                            ret.setEnabled(false);
                            ret.setText("Returned");
                        }
                    }
                });
            } else {
                ret.setEnabled(false);
                ret.setText("Returned");
            }
            //adding the tree and button to panel
            orders.add(tree, gbc);
            orders.add(ret, gbc2);
        }
        //initialising scroll pane with the populated panel
        scrollOrders = new JScrollPane(orders);
        scrollOrders.setPreferredSize(new Dimension(600, 300));
        add(scrollOrders);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
